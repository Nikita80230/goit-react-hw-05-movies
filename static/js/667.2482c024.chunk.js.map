{"version":3,"file":"static/js/667.2482c024.chunk.js","mappings":"4LAEaA,EAAS,WAClB,OACI,SAAC,KAAD,CACIC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,WAGjB,C,6DCZKC,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAsBvB,IApBkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACXC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,8BACKF,EAAOG,KAAI,SAAAC,GACR,OACI,SAAC,EAAAC,KAAD,CAEIC,GAAE,mBAAcF,EAAMG,IACtBC,MAAO,CAAEC,KAAMR,GAHnB,UAKI,SAACH,EAAD,CAAWM,MAAOA,KAJbA,EAAMG,GAOtB,KAGZ,C,mKChBYG,EAAa,WACtB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BL,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeiB,EAAf,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAA8BR,EAAAA,EAAAA,UAAS,MAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KA+BA,OAnBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQR,EAAaS,IAAI,SAE/B,GAAKD,EAAL,CAEA,IAAME,EAAW,mCAAG,oGAEZJ,GAAW,GAFC,UAGaK,EAAAA,EAAAA,iBAAgBH,GAH7B,OAGNI,EAHM,OAIZV,EAAUU,EAAWC,SAJT,gDAMZT,EAAS,KAAMU,SANH,yBAQZR,GAAW,GARC,4EAAH,qDAWjBI,GAbkB,CAcrB,GAAE,CAACV,KAGA,4BACI,wBAAI,gBACJ,kBAAMe,SA3BO,SAAAC,GACjBA,EAAEC,iBACFhB,EAAgB,CAAEO,MAAOX,GAC5B,EAwBO,WACI,kBAAOqB,QAAQ,GAAf,SAAkB,kBAClB,mBACA,kBACIC,SAnCK,SAAAH,GACjBlB,EAAckB,EAAEI,OAAOC,MAC1B,EAkCeC,KAAK,QACLD,MAAOxB,EACP0B,KAAK,OACLC,YAAY,qBAEhB,mBACA,mBAAQD,KAAK,SAAb,SAAsB,cAEzBlB,IAAW,SAAC,IAAD,IACXF,IAAS,wBAAKA,KACf,SAAC,IAAD,CAAWlB,OAAQA,MAG9B,EAED,W,6PC9DMwC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAAShB,IAAI,qBAD/B,uBACGsB,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BxC,GAA7B,yFACkBiC,EAAShB,IAAT,iBAAuBjB,IADzC,uBACGuC,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,yFACkBiB,EAAShB,IAAT,8BAAoCD,IADtD,uBACGuB,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCzC,GAAjC,yFACkBiC,EAAShB,IAAT,iBAAuBjB,EAAvB,aADlB,uBACGuC,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAoC1C,GAApC,yFACkBiC,EAAShB,IAAT,iBAAuBjB,EAAvB,aADlB,uBACGuC,EADH,EACGA,KADH,kBAEEA,GAFF,kE","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"MagnifyingGlass-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"MagnifyingGlass-wrapper\"\n            glassColor=\"#c0efff\"\n            color=\"#e15b64\"\n        />\n    );\n};","import React, { lazy } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MovieItem = lazy(() => import('components/MovieItem/MovieItem'));\n\nconst MovieList = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n        <>\n            {movies.map(movie => {\n                return (\n                    <Link\n                        key={movie.id}\n                        to={`/movies/:${movie.id}`}\n                        state={{ from: location }}\n                    >\n                        <MovieItem movie={movie} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nexport default MovieList;\n","import { Loader } from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getMoviesByName } from 'services/api';\n\nexport const MoviesPage = () => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(null);\n\n\n    const handleChange = e => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        setSearchParams({ query: searchTerm });\n    };\n\n    useEffect(() => {\n        const query = searchParams.get('query');\n\n        if (!query) return;\n\n        const fetchMovies = async () => {\n            try {\n                setLoading(true)\n                const moviesData = await getMoviesByName(query);\n                setMovies(moviesData.results);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoading(false)\n            }\n        };\n        fetchMovies();\n    }, [searchParams]);\n\n    return (\n        <div>\n            <h1>Movie page</h1>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"\">Search Movie</label>\n                <br />\n                <input\n                    onChange={handleChange}\n                    name=\"input\"\n                    value={searchTerm}\n                    type=\"text\"\n                    placeholder=\"Enter film name\"\n                />\n                <br />\n                <button type=\"submit\">Search</button>\n            </form>\n            {loading && <Loader />}\n            {error && <h3>{error}</h3>}\n            <MovieList movies={movies} />\n        </div>\n    );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst API_KEY = 'e0723ed903f05e10ff2c0d0ee3dce9dc';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport async function getMovies() {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n}\n\nexport async function getMoviesById(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n}\n\nexport async function getMoviesByName(query) {\n  const { data } = await instance.get(`/search/movie?query=${query}`);\n  return data;\n}\n\nexport async function getMoviesCastById(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n}\n\nexport async function getMoviesReviewsById(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n}\n"],"names":["Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","MovieItem","lazy","movies","location","useLocation","map","movie","Link","to","id","state","from","MoviesPage","useState","searchTerm","setSearchTerm","useSearchParams","searchParams","setSearchParams","setMovies","error","setError","loading","setLoading","useEffect","query","get","fetchMovies","getMoviesByName","moviesData","results","message","onSubmit","e","preventDefault","htmlFor","onChange","target","value","name","type","placeholder","instance","axios","baseURL","params","api_key","getMovies","data","getMoviesById","getMoviesCastById","getMoviesReviewsById"],"sourceRoot":""}