{"version":3,"file":"static/js/667.23ca114e.chunk.js","mappings":"iQAKMA,GAAYC,EAAAA,EAAAA,OACd,kBACI,IAAIC,SAAQ,SAACC,EAASC,GAClB,6BACKC,MAAK,SAAAC,GAAM,OAAIH,EAAQG,EAAOC,QAAUD,EAAS,CAAEC,QAASD,GAAjD,IACXE,MAAMJ,EACd,GALL,IAQSK,EAAa,WACtB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BL,EAAAA,EAAAA,UAAS,IAArC,eAAOM,EAAP,KAAeC,EAAf,KACA,GAA0BP,EAAAA,EAAAA,UAAS,MAAnC,eAAOQ,EAAP,KAAcC,EAAd,KAWMC,EAAQN,EAAaO,IAAI,SAkB/B,OAhBAC,EAAAA,EAAAA,YAAU,WACN,GAAKF,EAAL,CAEA,IAAMG,EAAW,mCAAG,8GAEaC,EAAAA,EAAAA,iBAAgBJ,GAF7B,OAENK,EAFM,OAGZR,EAAUQ,EAAWC,SAHT,gDAKZP,EAAS,EAAD,IALI,yBAOZQ,QAAQC,IAAI,gBAPA,4EAAH,qDAUjBL,GAZkB,CAarB,GAAE,CAACH,KAGA,4BACI,wCACA,kBAAMS,SA1BO,SAAAC,GACjBA,EAAEC,iBACFhB,EAAgB,CAAEK,MAAOT,GAC5B,EAuBO,WACI,kBAAOqB,QAAQ,GAAf,2BACA,mBACA,kBACIC,SAlCK,SAAAH,GACjBlB,EAAckB,EAAEI,OAAOC,MAC1B,EAiCeC,KAAK,QACLD,MAAOxB,EACP0B,KAAK,OACLC,YAAY,qBAEhB,mBACA,mBAAQD,KAAK,SAAb,uBAEHnB,GAASS,QAAQC,IAAIV,GACrBF,EAAOuB,KAAI,SAAAC,GACR,OACI,SAAC,EAAAC,KAAD,CAAqBC,GAAE,mBAAcF,EAAMG,IAA3C,UACI,SAAC3C,EAAD,CAAWwC,MAAOA,KADXA,EAAMG,GAIxB,MAGZ,EAED,W,6PCvEMC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAASvB,IAAI,qBAD/B,uBACG6B,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BR,GAA7B,yFACkBC,EAASvB,IAAT,iBAAuBsB,IADzC,uBACGO,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAe1B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BJ,GAA/B,yFACkBwB,EAASvB,IAAT,8BAAoCD,IADtD,uBACG8B,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCT,GAAjC,yFACkBC,EAASvB,IAAT,iBAAuBsB,EAAvB,aADlB,uBACGO,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAAoCV,GAApC,yFACkBC,EAASvB,IAAT,iBAAuBsB,EAAvB,aADlB,uBACGO,EADH,EACGA,KADH,kBAEEA,GAFF,kE","sources":["pages/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["import React, { lazy, useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport { getMoviesByName } from 'services/api';\n\nconst MovieItem = lazy(\n    () =>\n        new Promise((resolve, reject) => {\n            import('components/MovieItem/MovieItem')\n                .then(result => resolve(result.default ? result : { default: result }))\n                .catch(reject);\n        })\n);\n\nexport const MoviesPage = () => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n\n    const handleChange = e => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        setSearchParams({ query: searchTerm });\n    };\n\n    const query = searchParams.get('query');\n\n    useEffect(() => {\n        if (!query) return;\n\n        const fetchMovies = async () => {\n            try {\n                const moviesData = await getMoviesByName(query);\n                setMovies(moviesData.results);\n            } catch (error) {\n                setError(error);\n            } finally {\n                console.log('fetch worked');\n            }\n        };\n        fetchMovies();\n    }, [query]);\n\n    return (\n        <div>\n            <h1>Movie page</h1>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"\">Search Movie</label>\n                <br />\n                <input\n                    onChange={handleChange}\n                    name=\"input\"\n                    value={searchTerm}\n                    type=\"text\"\n                    placeholder=\"Enter film name\"\n                />\n                <br />\n                <button type=\"submit\">Search</button>\n            </form>\n            {error && console.log(error)}\n            {movies.map(movie => {\n                return (\n                    <Link key={movie.id} to={`/movies/:${movie.id}`}>\n                        <MovieItem movie={movie} />\n                    </Link>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst API_KEY = 'e0723ed903f05e10ff2c0d0ee3dce9dc';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport async function getMovies() {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n}\n\nexport async function getMoviesById(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n}\n\nexport async function getMoviesByName(query) {\n  const { data } = await instance.get(`/search/movie?query=${query}`);\n  return data;\n}\n\nexport async function getMoviesCastById(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n}\n\nexport async function getMoviesReviewsById(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n}\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews\n// q: input,\n// image_type: 'photo',\n// orientation: 'horizontal',\n// safesearch: 'true',\n// page: page,\n"],"names":["MovieItem","lazy","Promise","resolve","reject","then","result","default","catch","MoviesPage","useState","searchTerm","setSearchTerm","useSearchParams","searchParams","setSearchParams","movies","setMovies","error","setError","query","get","useEffect","fetchMovies","getMoviesByName","moviesData","results","console","log","onSubmit","e","preventDefault","htmlFor","onChange","target","value","name","type","placeholder","map","movie","Link","to","id","instance","axios","baseURL","params","api_key","getMovies","data","getMoviesById","getMoviesCastById","getMoviesReviewsById"],"sourceRoot":""}