{"version":3,"file":"static/js/247.32fb3939.chunk.js","mappings":"8LAAA,EAAgCA,EAAQ,KAAhCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UACVC,EAAcH,EAAQ,IAAtBG,UACAC,EAAsBJ,EAAQ,KAA9BI,kBAwCR,UAtCa,WACT,IAAQC,EAAYF,IAAZE,QACR,EAAwBJ,EAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KAiBA,OAfAL,GAAU,WACN,GAAKG,EAAL,CAEA,IAAMG,EAAe,mCAAG,6GAEYJ,EAAkBC,EAAQI,MAAM,IAF5C,OAEVC,EAFU,OAGhBH,EAAQG,EAAcJ,MAHN,gDAKhBK,QAAQC,IAAR,MALgB,qGAAH,qDASrBJ,GAXoB,CAYvB,GAAE,CAACH,IAEmB,IAAhBC,EAAKO,QACR,wBACKP,EAAKQ,KAAI,SAAAC,GACN,OACI,2BACI,gBACIC,IAAG,yCAAoCD,EAAME,cAC7CC,IAAI,MAER,uBAAIH,EAAMI,SALLJ,EAAMK,GAQtB,OAGL,2DAEP,C,6PCpCKC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAASM,IAAI,qBAD/B,uBACGC,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BT,GAA7B,yFACkBC,EAASM,IAAT,iBAAuBP,IADzC,uBACGQ,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBV,EAASM,IAAT,8BAAoCI,IADtD,uBACGH,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAexB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCgB,GAAjC,yFACkBC,EAASM,IAAT,iBAAuBP,EAAvB,aADlB,uBACGQ,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAoCZ,GAApC,yFACkBC,EAASM,IAAT,iBAAuBP,EAAvB,aADlB,uBACGQ,EADH,EACGA,KADH,kBAEEA,GAFF,kE","sources":["components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["const { useState, useEffect } = require('react');\nconst { useParams } = require('react-router-dom');\nconst { getMoviesCastById } = require('services/api');\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        if (!movieId) return;\n\n        const fetchMoviesById = async () => {\n            try {\n                const movieCastData = await getMoviesCastById(movieId.slice(1));\n                setCast(movieCastData.cast);\n            } catch (error) {\n                console.log(error);\n            } finally {\n            }\n        };\n        fetchMoviesById();\n    }, [movieId]);\n\n    return cast.length !== 0 ? (\n        <ul>\n            {cast.map(actor => {\n                return (\n                    <li key={actor.id}>\n                        <img\n                            src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                            alt=\"\"\n                        />\n                        <p>{actor.name}</p>\n                    </li>\n                );\n            })}\n        </ul>\n    ) : (\n        <h3> There are no cast of this film</h3>\n    );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'e0723ed903f05e10ff2c0d0ee3dce9dc';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport async function getMovies() {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n}\n\nexport async function getMoviesById(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n}\n\nexport async function getMoviesByName(query) {\n  const { data } = await instance.get(`/search/movie?query=${query}`);\n  return data;\n}\n\nexport async function getMoviesCastById(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n}\n\nexport async function getMoviesReviewsById(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n}\n"],"names":["require","useState","useEffect","useParams","getMoviesCastById","movieId","cast","setCast","fetchMoviesById","slice","movieCastData","console","log","length","map","actor","src","profile_path","alt","name","id","instance","axios","baseURL","params","api_key","getMovies","get","data","getMoviesById","getMoviesByName","query","getMoviesReviewsById"],"sourceRoot":""}