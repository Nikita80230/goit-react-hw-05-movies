{"version":3,"file":"static/js/680.cad6eb4f.chunk.js","mappings":"wNAKMA,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,IAAIC,SAAQ,SAACC,EAASC,GAC/C,6BACKC,MAAK,SAAAC,GAAM,OAAIH,EAAQG,EAAOC,QAAUD,EAAS,CAAEC,QAASD,GAAjD,IACXE,MAAMJ,EACd,GAJsB,IAqCvB,UA/BiB,WACb,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,8GAEaC,EAAAA,EAAAA,aAFb,OAENC,EAFM,OAGZN,EAAUM,EAAWC,SAHT,gDAKZL,EAAS,EAAD,IALI,qGAAH,qDASjBE,GACH,GAAE,KAGC,iBAAKI,UAAU,WAAf,UACKP,GAASQ,QAAQC,IAAIT,GACrBF,EAAOY,KAAI,SAAAC,GACR,OACI,SAAC,EAAAC,KAAD,CAAqBC,GAAE,mBAAcF,EAAMG,IAA3C,UACI,SAAC1B,EAAD,CAAWuB,MAAOA,KADXA,EAAMG,GAIxB,MAGZ,C,6PCpCKC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAef,IAAtB,4CAAO,OAAP,oBAAO,sGACkBW,EAASK,IAAI,qBAD/B,uBACGC,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BR,GAA7B,yFACkBC,EAASK,IAAT,iBAAuBN,IADzC,uBACGO,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBT,EAASK,IAAT,8BAAoCI,IADtD,uBACGH,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCX,GAAjC,yFACkBC,EAASK,IAAT,iBAAuBN,EAAvB,aADlB,uBACGO,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeK,EAAtB,kC,aAAO,O,oBAAA,WAAoCZ,GAApC,yFACkBC,EAASK,IAAT,iBAAuBN,EAAvB,aADlB,uBACGO,EADH,EACGA,KADH,kBAEEA,GAFF,kE","sources":["pages/HomePage/HomePage.jsx","services/api.js"],"sourcesContent":["import React, { lazy, useEffect, useState } from 'react';\nimport { getMovies } from 'services/api';\nimport { Link } from 'react-router-dom';\n\n// const MovieItem = lazy(() => ('components/MovieItem/MovieItem'))\nconst MovieItem = lazy(() => new Promise((resolve, reject) => {\n    import('components/MovieItem/MovieItem')\n        .then(result => resolve(result.default ? result : { default: result }))\n        .catch(reject)\n}));\n\nconst HomePage = () => {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                const moviesData = await getMovies();\n                setMovies(moviesData.results);\n            } catch (error) {\n                setError(error);\n            } finally {\n            }\n        };\n        fetchMovies();\n    }, []);\n\n    return (\n        <div className=\"homePage\">\n            {error && console.log(error)}\n            {movies.map(movie => {\n                return (\n                    <Link key={movie.id} to={`/movies/:${movie.id}`}>\n                        <MovieItem movie={movie} />\n                    </Link>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst API_KEY = 'e0723ed903f05e10ff2c0d0ee3dce9dc';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport async function getMovies() {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n}\n\nexport async function getMoviesById(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n}\n\nexport async function getMoviesByName(query) {\n  const { data } = await instance.get(`/search/movie?query=${query}`);\n  return data;\n}\n\nexport async function getMoviesCastById(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n}\n\nexport async function getMoviesReviewsById(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n}\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews\n// q: input,\n// image_type: 'photo',\n// orientation: 'horizontal',\n// safesearch: 'true',\n// page: page,\n"],"names":["MovieItem","lazy","Promise","resolve","reject","then","result","default","catch","useState","movies","setMovies","error","setError","useEffect","fetchMovies","getMovies","moviesData","results","className","console","log","map","movie","Link","to","id","instance","axios","baseURL","params","api_key","get","data","getMoviesById","getMoviesByName","query","getMoviesCastById","getMoviesReviewsById"],"sourceRoot":""}