{"version":3,"file":"static/js/667.357d18e8.chunk.js","mappings":"6KAGMA,GAAYC,EAAAA,EAAAA,OACd,kBACI,IAAIC,SAAQ,SAACC,EAASC,GAClB,6BACKC,MAAK,SAAAC,GAAM,OAAIH,EAAQG,EAAOC,QAAUD,EAAS,CAAEC,QAASD,GAAjD,IACXE,MAAMJ,EACd,GALL,IA4BJ,IApBkB,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACXC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,8BACKF,EAAOG,KAAI,SAAAC,GACR,OACI,SAAC,EAAAC,KAAD,CAEIC,GAAE,mBAAcF,EAAMG,IACtBC,MAAO,CAAEC,KAAMR,GAHnB,UAKI,SAACV,EAAD,CAAWa,MAAOA,KAJbA,EAAMG,GAOtB,KAGZ,C,0JCxBYG,EAAa,WACtB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BL,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeiB,EAAf,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KA2BA,OAhBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQN,EAAaO,IAAI,SAE/B,GAAKD,EAAL,CAEA,IAAME,EAAW,mCAAG,8GAEaC,EAAAA,EAAAA,iBAAgBH,GAF7B,OAENI,EAFM,OAGZR,EAAUQ,EAAWC,SAHT,gDAKZP,EAAS,KAAMQ,SALH,yDAAH,qDAQjBJ,GAVkB,CAWrB,GAAE,CAACR,KAGA,4BACI,wCACA,kBAAMa,SAxBO,SAAAC,GACjBA,EAAEC,iBACFd,EAAgB,CAAEK,MAAOT,GAC5B,EAqBO,WACI,kBAAOmB,QAAQ,GAAf,2BACA,mBACA,kBACIC,SAhCK,SAAAH,GACjBhB,EAAcgB,EAAEI,OAAOC,MAC1B,EA+BeC,KAAK,QACLD,MAAOtB,EACPwB,KAAK,OACLC,YAAY,qBAEhB,mBACA,mBAAQD,KAAK,SAAb,uBAEHlB,IAAS,wBAAKA,KACf,SAAC,IAAD,CAAWlB,OAAQA,MAG9B,EAED,W,6PCvDMsC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAAShB,IAAI,qBAD/B,uBACGsB,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BtC,GAA7B,yFACkB+B,EAAShB,IAAT,iBAAuBf,IADzC,uBACGqC,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,yFACkBiB,EAAShB,IAAT,8BAAoCD,IADtD,uBACGuB,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCvC,GAAjC,yFACkB+B,EAAShB,IAAT,iBAAuBf,EAAvB,aADlB,uBACGqC,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAoCxC,GAApC,yFACkB+B,EAAShB,IAAT,iBAAuBf,EAAvB,aADlB,uBACGqC,EADH,EACGA,KADH,kBAEEA,GAFF,kE","sources":["components/MovieList/MovieList.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["import React, { lazy } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MovieItem = lazy(\n    () =>\n        new Promise((resolve, reject) => {\n            import('components/MovieItem/MovieItem')\n                .then(result => resolve(result.default ? result : { default: result }))\n                .catch(reject);\n        })\n);\n\nconst MovieList = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n        <>\n            {movies.map(movie => {\n                return (\n                    <Link\n                        key={movie.id}\n                        to={`/movies/:${movie.id}`}\n                        state={{ from: location }}\n                    >\n                        <MovieItem movie={movie} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nexport default MovieList;\n","import MovieList from 'components/MovieList/MovieList';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getMoviesByName } from 'services/api';\n\nexport const MoviesPage = () => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n\n    const handleChange = e => {\n        setSearchTerm(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        setSearchParams({ query: searchTerm });\n    };\n\n    useEffect(() => {\n        const query = searchParams.get('query');\n\n        if (!query) return;\n\n        const fetchMovies = async () => {\n            try {\n                const moviesData = await getMoviesByName(query);\n                setMovies(moviesData.results);\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n        fetchMovies();\n    }, [searchParams]);\n\n    return (\n        <div>\n            <h1>Movie page</h1>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"\">Search Movie</label>\n                <br />\n                <input\n                    onChange={handleChange}\n                    name=\"input\"\n                    value={searchTerm}\n                    type=\"text\"\n                    placeholder=\"Enter film name\"\n                />\n                <br />\n                <button type=\"submit\">Search</button>\n            </form>\n            {error && <h3>{error}</h3>}\n            <MovieList movies={movies} />\n        </div>\n    );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst API_KEY = 'e0723ed903f05e10ff2c0d0ee3dce9dc';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport async function getMovies() {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n}\n\nexport async function getMoviesById(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n}\n\nexport async function getMoviesByName(query) {\n  const { data } = await instance.get(`/search/movie?query=${query}`);\n  return data;\n}\n\nexport async function getMoviesCastById(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n}\n\nexport async function getMoviesReviewsById(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n}\n"],"names":["MovieItem","lazy","Promise","resolve","reject","then","result","default","catch","movies","location","useLocation","map","movie","Link","to","id","state","from","MoviesPage","useState","searchTerm","setSearchTerm","useSearchParams","searchParams","setSearchParams","setMovies","error","setError","useEffect","query","get","fetchMovies","getMoviesByName","moviesData","results","message","onSubmit","e","preventDefault","htmlFor","onChange","target","value","name","type","placeholder","instance","axios","baseURL","params","api_key","getMovies","data","getMoviesById","getMoviesCastById","getMoviesReviewsById"],"sourceRoot":""}