{"version":3,"file":"static/js/247.bdc2fd85.chunk.js","mappings":"uMAEA,EAAgCA,EAAQ,KAAhCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UACVC,EAAcH,EAAQ,IAAtBG,UACAC,EAAsBJ,EAAQ,KAA9BI,kBAiDR,UA/Ca,WACT,IAAQC,EAAYF,IAAZE,QACR,EAAwBJ,EAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,EAA0BN,EAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,EAA8BR,EAAS,MAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAT,GAAU,WACN,GAAKG,EAAL,CAEA,IAAMO,EAAe,mCAAG,oGAEhBD,GAAW,GAFK,SAGYP,EAAkBC,EAAQQ,MAAM,IAH5C,OAGVC,EAHU,OAIhBP,EAAQO,EAAcR,MAJN,gDAMhBG,EAAS,KAAMM,SANC,yBAQhBJ,GAAW,GARK,4EAAH,qDAWrBC,GAboB,CAcvB,GAAE,CAACP,KAGA,2BACKK,IAAW,SAAC,IAAD,IACK,IAAhBJ,EAAKU,QACF,wBACKV,EAAKW,KAAI,SAAAC,GACN,OACI,2BACI,gBACIC,IAAG,yCAAoCD,EAAME,cAC7CC,IAAI,MAER,uBAAIH,EAAMI,SALLJ,EAAMK,GAQtB,OAGL,wBAAKf,MAIpB,C,4ECjDYgB,EAAS,WAClB,OACI,SAAC,KAAD,CACIC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,WAGjB,C,6PCXKC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAASM,IAAI,qBAD/B,uBACGC,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BlB,GAA7B,yFACkBU,EAASM,IAAT,iBAAuBhB,IADzC,uBACGiB,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBV,EAASM,IAAT,8BAAoCI,IADtD,uBACGH,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAepC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCmB,GAAjC,yFACkBU,EAASM,IAAT,iBAAuBhB,EAAvB,aADlB,uBACGiB,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAoCrB,GAApC,yFACkBU,EAASM,IAAT,iBAAuBhB,EAAvB,aADlB,uBACGiB,EADH,EACGA,KADH,kBAEEA,GAFF,kE","sources":["components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/api.js"],"sourcesContent":["import { Loader } from 'components/Loader/Loader';\n\nconst { useState, useEffect } = require('react');\nconst { useParams } = require('react-router-dom');\nconst { getMoviesCastById } = require('services/api');\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState(null)\n    const [loading, setLoading] = useState(null)\n\n    useEffect(() => {\n        if (!movieId) return;\n\n        const fetchMoviesById = async () => {\n            try {\n                setLoading(true)\n                const movieCastData = await getMoviesCastById(movieId.slice(1));\n                setCast(movieCastData.cast);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoading(false)\n            }\n        };\n        fetchMoviesById();\n    }, [movieId]);\n\n    return (\n        <div>\n            {loading && <Loader />}\n            {cast.length !== 0 ? (\n                <ul>\n                    {cast.map(actor => {\n                        return (\n                            <li key={actor.id}>\n                                <img\n                                    src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                                    alt=\"\"\n                                />\n                                <p>{actor.name}</p>\n                            </li>\n                        );\n                    })}\n                </ul>\n            ) : (\n                <h3>{error}</h3>\n            )}\n        </div>\n    )\n};\n\nexport default Cast;\n","import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"MagnifyingGlass-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"MagnifyingGlass-wrapper\"\n            glassColor=\"#c0efff\"\n            color=\"#e15b64\"\n        />\n    );\n};","import axios from 'axios';\n\nconst API_KEY = 'e0723ed903f05e10ff2c0d0ee3dce9dc';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport async function getMovies() {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n}\n\nexport async function getMoviesById(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n}\n\nexport async function getMoviesByName(query) {\n  const { data } = await instance.get(`/search/movie?query=${query}`);\n  return data;\n}\n\nexport async function getMoviesCastById(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n}\n\nexport async function getMoviesReviewsById(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n}\n"],"names":["require","useState","useEffect","useParams","getMoviesCastById","movieId","cast","setCast","error","setError","loading","setLoading","fetchMoviesById","slice","movieCastData","message","length","map","actor","src","profile_path","alt","name","id","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","instance","axios","baseURL","params","api_key","getMovies","get","data","getMoviesById","getMoviesByName","query","getMoviesReviewsById"],"sourceRoot":""}